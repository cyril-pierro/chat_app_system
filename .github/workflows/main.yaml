name: Chat Application Workflow
run-name: ${{ github.actor }} is running Workflow
on:
  push:
    branches:
      - main
      - refactor
  # pull_request:
  #   branches:
  #     - main
jobs:
  get_services_modified:
    if: github.event.pull_request.merged == true || ${{ github.event_name }} == 'push'
    name: Get all Chat App Services Modified
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.services.outputs.changes }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: services
        with:
          filters: |
            account:
              - 'backend/services/account/**'
            chat:
              - 'backend/services/chat/**'
            notification:
              - 'backend/services/notification/**'
            support:
              - 'backend/services/support/**'
  run_linters:
    name: Run Linters on Code
    runs-on: ubuntu-latest
    needs: get_services_modified
    if: ${{ needs.get_services_modified.outputs.services != '[]' && needs.get_services_modified.outputs.services != '' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Lint Code
        uses: github/super-linter/slim@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_PYTHON_PYLINT: false
          VALIDATE_PYTHON_ISORT: false
          VALIDATE_MARKDOWN: false
          VALIDATE_JSCPD: false
          VALIDATE_ANSIBLE: false
          VALIDATE_NATURAL_LANGUAGE: false
          KUBERNETES_KUBEVAL_OPTIONS: "--ignore-missing-schemas --schema-location https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master"

  test_services_modified:
    name: Test all Chat App Services Modified
    needs:
      - run_linters
      - get_services_modified

    if: ${{ needs.get_services_modified.outputs.services != '[]' && needs.get_services_modified.outputs.services != '' }}
    runs-on: ubuntu-latest
    env:
      # You can use github secrets for values
      TESTING: True
      TEST_DATABASE_URL: "sqlite:///./testing.db"
      DATABASE_URL: "sqlite:///./production.db"
      LOG_FILENAME: "chat_application.log"
      authjwt_secret_key: "test_secret_key"
      authjwt_access_token_expires: 3
      authjwt_refresh_token_expires: 5
      authjwt_access_cookie_key: "test_cookie_access_key"
      authjwt_refresh_cookie_key: "test_cookie_refresh_refresh"
      authjwt_access_csrf_cookie_key: "test_access_csrf_cookie_key"
      authjwt_refresh_csrf_cookie_key: "test_refresh_csrf_cookie_key"
      REDIS_HOST: "localhost"
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      BROKER_URL: "0.0.0.0:9092"
      ADMIN_USERNAME: "test_admin"
      ADMIN_PASSWORD: "test_admin_password"
      ADMIN_EMAIL: "test_admin@test_email.com"
      AUTH_MANAGEMENT_URL: "http://account_service_url"
      SUPPORT_URL: "http://support_service_url"
      ELASTICSEARCH_HOST: "localhost"
      ELASTICSEARCH_PORT: 9000
      JAEGER_HOST: "localhost"
      JAEGER_PORT: 6831
      SECRET_KEY: "django_secret_key"
      CELERY_BROKER_URL: ""
      CELERY_RESULT_URL: ""
      STMP_SERVER: ""
      EMAIL_PORT: ""
      EMAIL_SENDER: ""
      EMAIL_PASSWORD: ""
      ACCOUNT_SERVICE_URL: ""
      MYSQL_USERNAME: ""
      MYSQL_PASSWORD: ""
      MYSQL_HOST: ""
      GRAFANA_ADMIN_USER: ""
      GRAFANA_ADMIN_PASSWORD: ""
      GRAFANA_SERVER_URL: ""
      DJANGO_SETTINGS_MODULE: core.settings
    strategy:
      # Don't fail all jobs if a single job fails
      fail-fast: false

      matrix:
        services: ${{ fromJson(needs.get_services_modified.outputs.services) }}

    defaults:
      run:
        working-directory: backend/services/${{ matrix.services }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9.*"

      - name: Install Project dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          sudo apt-get install redis -y
          pip install pytest; pip install pytest-cov
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      - name: Run Django migrations
        if: ${{ matrix.services == 'chat' }}
        run: |
          python manage.py makemigrations
          python manage.py migrate
    
      - name: Run Account migrations
        if: ${{ matrix.services == 'account' }}
        run: alembic upgrade head

      - name: Run tests for Services
        run: |
          pytest -vv

  vulnerabilty_scan_for_packages:
    name: Security Scan for project dependencies
    needs:
      - run_linters
      - get_services_modified
      - test_services_modified

    if: ${{ needs.get_services_modified.outputs.services != '[]' && needs.get_services_modified.outputs.services != '' }}
    runs-on: ubuntu-latest
    strategy:
      # Don't fail all jobs if a single job fails
      fail-fast: false

      matrix:
        services: ${{ fromJson(needs.get_services_modified.outputs.services) }}

    defaults:
      run:
        working-directory: backend/services/${{ matrix.services }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install scanning tools
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b .
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Run Scan
        run: |
          ./syft packages . -o spdx-json > bom.json
          trivy sbom --exit-code 1 -s CRITICAL --ignore-status fixed bom.json

  deploy_services_modified:
    name: Deploy Services Modified
    needs:
      - get_services_modified
      - test_services_modified
      - vulnerabilty_scan_for_packages

    if: ${{ needs.get_services_modified.outputs.services != '[]' && needs.get_services_modified.outputs.services != '' }}
    runs-on: ubuntu-latest
    strategy:
      # Don't fail all jobs if a single job fails
      fail-fast: false
      matrix:
        services: ${{ fromJson(needs.get_services_modified.outputs.services) }}

    defaults:
      run:
        working-directory: backend/services/${{ matrix.services }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Docker Image tag
        id: tag
        run: echo image_tag='$(git rev-parse --short HEAD)' >> $GITHUB_OUTPUT

      - name: Install Docker environment
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh ./get-docker.sh
      
      - name: Build Docker Image
        run: |
          docker build -t chat_app_${{ matrix.services }}:${{ steps.tag.outputs.image_tag }} .

      - name: Run Vulnerability Scan on Image
        if: ${{ matrix.services != 'support' }}
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
          sudo apt update
          sudo apt install trivy
          sudo apt clean; sudo apt autoremove -y
          echo Docker Scanning of Base Image for critical issues
          docker scout cves --only-severity critical -e chat_app_${{ matrix.services }}:${{ steps.tag.outputs.image_tag }}
          echo Docker scanning of the built Image for critical issues
          trivy image --severity CRITICAL --ignore-status fixed chat_app_${{ matrix.services }}:${{ steps.tag.outputs.image_tag }}
      
      - name: Login to Docker Hub
        run:  |
          echo Login To Docker Hub
          echo '${{secrets.DOCKER_HUB_TOKEN }}' | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Push Image to Docker Registry
        run: |
          docker tag chat_app_${{ matrix.services }}:${{ steps.tag.outputs.image_tag }} ${{ secrets.DOCKERHUB_USERNAME }}/chat_app_${{ matrix.services }}:${{ steps.tag.outputs.image_tag }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/chat_app_${{ matrix.services }}:${{ steps.tag.outputs.image_tag }}
          docker logout
          sudo rm -rf /home/runner/.docker/config.json

  update_deployment_manifest:
    name: Update Image of Deployment File
    needs:
      - get_services_modified
      - test_services_modified
      - vulnerabilty_scan_for_packages
      - deploy_services_modified

    if: ${{ needs.get_services_modified.outputs.services != '[]' && needs.get_services_modified.outputs.services != '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      # Don't fail all jobs if a single job fails
      fail-fast: false
      matrix:
        services: ${{ fromJson(needs.get_services_modified.outputs.services) }}

    defaults:
      run:
        working-directory: manifest/${{ matrix.services }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Modify Deployment File with New Image
        run: |
          imageTag=$(echo $(grep cyrildavif/chat_app deployment.yaml) | cut -d ":" -f 3)
          tag=$(git rev-parse --short HEAD)
          echo "New Image Tag-> $tag"
          echo "Old imageTag ${imageTag}"
          sed -i "s/$imageTag/$tag/" deployment.yaml

      - name: Add and Commit
        uses: EndBug/add-and-commit@v9
        with:
          add: "**/*.yaml"
          author_name: ${{ github.actor }}
          pull: "--rebase --autostash"
          author_email: ${{ github.event.pusher.email }}
          message: "update deployment manifest file"
